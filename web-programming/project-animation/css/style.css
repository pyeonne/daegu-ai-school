html, body {
    margin: 0;
    padding: 0;
}

ul {
    list-style: none;
}

a {
    text-decoration: none;
    color: #000000;
}

.mouse-animation li {
    width: 250px;
    background-color: rgba(0, 0, 0, 1);
    padding: 20px;

    border-top: solid 5px #dfdfdf;
    transition: opacity 0.5s, margin-left 0.5s;
}

.mouse-animation li:hover {
    /* 
    opacity
    투명도에 영향을 미치는 속성 
    글자까지 영향을 받는다.
    */
    /* opacity: 0.5; */

    /* 
    글자에 투명도를 적용하고 싶지 않으면  rgba() 사용 
    rgba 코드 알수 있는 법 http://hex2rgba.devoth.com/
    맨 뒤에 숫자가 1이면 투명도가 없는 상태
    */
    background-color: rgba(0, 0, 0, 0.5);
    margin-left: 10px;
}

.mouse-animation li a {
    color: red;
    font-size: 20px;
}

.move-box {
    position: relative;
    width: 200px;
    height: 200px;
    background-color: red;

    animation-name: moveBox;
    animation-duration: 4s;
    animation-timing-function: linear;
    animation-delay: 1s;
    animation-iteration-count: infinite;
    animation-direction: alternate;

    /* 
    running 애니메이션을 웹브라우저를 켜는 순간 움직이겠다 
    paused 정지
    */
    animation-play-state: running;
    /* animation-play-state: paused; */

    /* 0% 애니메이션 상태를 최초 사용자에게 보여주겠다 
    자주 사용되는 기법으로 꼭 기억해두기*/
    animation-fill-mode: backwards;
}

@keyframes moveBox {
    0% {
        background-color: green;
        /* position: relative; 를 사용하면 상하좌우 위치를 설정가능함 */
        left: 0;
        top: 0;
    }

    25% {
        background-color: yellow;
        left: 500px;
        top: 0;
    }

    50% {
        background-color: gray;
        left: 500px;
        top: 500px;
        border-radius: 50%;
    }

    75% {
        background-color: blue;
        left: 0px;
        top: 500px;
    }

    100% {
        background-color: red;
        left: 0;
        top: 0;
    }
}

.outer-border {
    display: flex;
    justify-content: center;
    align-items: center;

    width: 200px;
    height: 200px;
    border: solid 15px red;
    border-radius: 50%;

    margin: 0 auto;
    margin-top: 200px;

    animation: outerBorder 2s infinite;
}

@keyframes outerBorder {
    0% { border-color: red; transform: scale(1); }

    25% { border-color: yellow; transform: scale(1.2); }

    50% { border-color: blue; transform: scale(1.3); }

    75% { border-color: green; transform: scale(1.2); }

    100% { border-color: pink; transform: scale(1); }
}

.inner-border {
    /* 원에서 벗어나는 것을 방지 */
    box-sizing: border-box;
    width: 75px;
    height: 75px;
    border: 5px solid purple;

    animation: innerBorder 2s infinite;
}

@keyframes innerBorder {
    0% {transform: rotate(0deg);}
    25% {border-color: blue; border-width: 10px;}
    50% {border-color: yellow; border-width: 20px;}
    75% {border-color: green; border-width: 40px;}
    100% {border-color: gray; border-width: 5px; transform: rotate(360deg) }
}


.mario-container {
    width: 500px;
    height: 500px;
    border: solid 10px black;

    margin: 0 auto;
    margin-top: 200px;
}

.mario-container .mario-coin {
    width: 70px;
    height: 70px;
    background-color: yellow;
    border-radius: 50%;

    margin: 0 auto;
    margin-top: 100px;

    animation: jumpCoin 0.8s linear infinite;
}

@keyframes jumpCoin {
    0% {
        transform: translateY(0);
        opacity: 1;
    }

    50% {
        /* 두개의 속성값을 하나의t transform 속성에 줄 수 있음 */
        transform: translateY(-100px) rotateY(180deg); 
        opacity: 0;
    }
    100% {
        transform: translateY(-100px) rotateY(360deg);
        opacity: 0;
    }
}

.mario-container .mario-box {
    width: 100px;
    height: 100px;
    background-color: blue;

    margin: 0 auto;

    animation: jumpBox 0.5s linear infinite alternate;
}

@keyframes jumpBox {
    /* translateY Y축에만 영향을 줌 */
    0% { transform: translateY(0); }
    50% { transform: translateY(-10px) }
    100% { transform: translateY(0) }
}

/* overflow: hidden 이미지의 크기를 벗어나는 건 감추겠다 
cursor: pointer 이미지 위에 마우스를 올리면 손가락모양으로 변한다*/
.hover-image {
    cursor: pointer;
    overflow: hidden;
    position: relative;
    width: 400px;
    border: solid 10px #000000;
 
}

/* width: 100% 부모의 width 400px에 맞춰 이미지를 맞추겠다 */
/* img태그는 태생적으로 하단에 약간의 공백을 가지고 있다.
vertical-align: middle 속성을 사용해 제거 */
.hover-image img {
    width: 100%;
    vertical-align: middle;
    transition: transform 0.3s linear;
}

.hover-image:hover img {
    transform: scale(1.3);
}

/* 자식요소가 3차원일때 부모 높이값에 영향을 줄 수 없다 
부모가 3차원 특징을가지고 있다면 width값을 부모를 기준으로 지정할 수 있다
그리고 자식요소가 absolute면 좌표기준점은 부모기준*/
.hover-image .image-info {
    box-sizing: border-box;
    position: absolute;
    width: 100%;

    background-color: rgb(0, 0, 0, 0.5);
    padding: 20px;

    left: 0;
    /* image-info가 숨겨짐 */
    bottom: -85;

    transition:  bottom 0.3s linear;
}

.hover-image:hover .image-info {
    bottom: 0;
}

.hover-image .image-info h2,
.hover-image .image-info p {
    margin: 0;
    padding: 0;
    color: #ffffff;
}

.hover-image .image-info h2 {
    font-size: 20px;
}

.hover-image .image-info p {
    font-size: 15px;
}


.color-red {
    color: red;
}

.animate__animated {
    margin-top: 200px;
    margin-left: 200px;
}